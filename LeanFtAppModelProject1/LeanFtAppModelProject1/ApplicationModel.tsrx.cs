//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace LeanFtAppModelProject1
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.51")]
	public class ApplicationModel : AppModelBase
	{
		#region Constructors

		public ApplicationModel(ITestObject contextTestObject)
		{
			Name = @"ApplicationModel";
			SearchResultPage = new SearchResultPageNode(contextTestObject, this);
			MobilePhonesPage = new MobilePhonesPageNode(contextTestObject, this);
			MainPage = new MainPageNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public SearchResultPageNode SearchResultPage { get; private set; }
		public MobilePhonesPageNode MobilePhonesPage { get; private set; }
		public MainPageNode MainPage { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class SearchResultPageNode : PageNodeBase
		{
			#region Constructors
		
			public SearchResultPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				PriceFromEditField = new PriceFromEditFieldNode(this, applicationModel);
				PriceToEditField = new PriceToEditFieldNode(this, applicationModel);
				ProductCardsWebElement = new ProductCardsWebElementNode(this, applicationModel);
				CheckedsValuesContainer = new CheckedsValuesContainerNode(this, applicationModel);
				DisplayName = @"SearchResultPage";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public PriceFromEditFieldNode PriceFromEditField { get; private set; }
			public PriceToEditFieldNode PriceToEditField { get; private set; }
			public ProductCardsWebElementNode ProductCardsWebElement { get; private set; }
			public CheckedsValuesContainerNode CheckedsValuesContainer { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class PriceFromEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public PriceFromEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"priceFrom";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						TagName = @"INPUT",
						XPath = @"//INPUT[@id=""gf-pricefrom-var""]"
					};
				}
			
				#endregion
			
			}

			public sealed class PriceToEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public PriceToEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"priceTo";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						XPath = @"//INPUT[@id=""gf-priceto-var""]"
					};
				}
			
				#endregion
			
			}

			public sealed class ProductCardsWebElementNode : WebElementNodeBase
			{
				#region Constructors
			
				public ProductCardsWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"productCards";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						XPath = @"//div[contains(@class,'snippet-card__info')]",
						Index = 0
					};
				}
			
				#endregion
			
			}

			public sealed class CheckedsValuesContainerNode : WebElementNodeBase
			{
				#region Constructors
			
				public CheckedsValuesContainerNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"checkedsValuesContainer";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						IsVisible = true,
						XPath = @"//div[contains(@class,'filter-block__list')]"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class MobilePhonesPageNode : PageNodeBase
		{
			#region Constructors
		
			public MobilePhonesPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				MobilePhoneHeaderWebElement = new MobilePhoneHeaderWebElementNode(this, applicationModel);
				SetFiltersButton = new SetFiltersButtonNode(this, applicationModel);
				TypeSelectListBox = new TypeSelectListBoxNode(this, applicationModel);
				PlatformSelectListBox = new PlatformSelectListBoxNode(this, applicationModel);
				PriceToEditField = new PriceToEditFieldNode(this, applicationModel);
				PriceFromEditField = new PriceFromEditFieldNode(this, applicationModel);
				DisplayName = @"MobilePhonesPage";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public MobilePhoneHeaderWebElementNode MobilePhoneHeaderWebElement { get; private set; }
			public SetFiltersButtonNode SetFiltersButton { get; private set; }
			public TypeSelectListBoxNode TypeSelectListBox { get; private set; }
			public PlatformSelectListBoxNode PlatformSelectListBox { get; private set; }
			public PriceToEditFieldNode PriceToEditField { get; private set; }
			public PriceFromEditFieldNode PriceFromEditField { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class MobilePhoneHeaderWebElementNode : WebElementNodeBase
			{
				#region Constructors
			
				public MobilePhoneHeaderWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"mobilePhoneHeader";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						ClassName = @"b-page-title__title",
						TagName = @"H1",
						InnerText = @"Мобильные телефоны"
					};
				}
			
				#endregion
			
			}

			public sealed class SetFiltersButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SetFiltersButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"setFiltersButton";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						ButtonType = @"submit",
						Text = @"Подобрать",
						TagName = @"INPUT"
					};
				}
			
				#endregion
			
			}

			public sealed class TypeSelectListBoxNode : ListBoxNodeBase
			{
				#region Constructors
			
				public TypeSelectListBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"typeSelect";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ListBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ListBoxDescription
					{
						TagName = @"SELECT",
						Name = @"2142542726"
					};
				}
			
				#endregion
			
			}

			public sealed class PlatformSelectListBoxNode : ListBoxNodeBase
			{
				#region Constructors
			
				public PlatformSelectListBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"platformSelect";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ListBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ListBoxDescription
					{
						TagName = @"SELECT",
						Name = @"2142557977"
					};
				}
			
				#endregion
			
			}

			public sealed class PriceToEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public PriceToEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"priceTo";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						TagName = @"INPUT",
						Name = @"2140131887"
					};
				}
			
				#endregion
			
			}

			public sealed class PriceFromEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public PriceFromEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"priceFrom";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						TagName = @"INPUT",
						Name = @"2140131888"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class MainPageNode : PageNodeBase
		{
			#region Constructors
		
			public MainPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				YandexLogoImage = new YandexLogoImageNode(this, applicationModel);
				ElectronikLink = new ElectronikLinkNode(this, applicationModel);
				MobilePhoneLink = new MobilePhoneLinkNode(this, applicationModel);
				DisplayName = @"MainPage";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription
				{
					Url = @"https://market.yandex.ru"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public YandexLogoImageNode YandexLogoImage { get; private set; }
			public ElectronikLinkNode ElectronikLink { get; private set; }
			public MobilePhoneLinkNode MobilePhoneLink { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class YandexLogoImageNode : ImageNodeBase
			{
				#region Constructors
			
				public YandexLogoImageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"YandexLogo";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ImageDescription
					{
						Href = @"http://www.yandex.ru/",
						Type = HP.LFT.SDK.Web.ImageType.Link,
						TagName = @"IMG"
					};
				}
			
				#endregion
			
			}

			public sealed class ElectronikLinkNode : LinkNodeBase
			{
				#region Constructors
			
				public ElectronikLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"electronikLink";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription
					{
						ClassName = @"link topmenu__link",
						InnerText = @"Электроника",
						IsVisible = true,
						XPath = @"//LI[1]/A[1]"
					};
				}
			
				#endregion
			
			}

			public sealed class MobilePhoneLinkNode : LinkNodeBase
			{
				#region Constructors
			
				public MobilePhoneLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"mobilePhoneLink";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription
					{
						InnerText = @"Мобильные телефоны",
						Index = 0
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class LinkNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ILink, HP.LFT.SDK.Web.LinkDescription>, HP.LFT.SDK.Web.ILink
		{
			public LinkNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Href
			{
				get { return Concrete.Href; }		
			}
	
			public string Target
			{
				get { return Concrete.Target; }		
			}
	
			public string FontName
			{
				get { return Concrete.FontName; }		
			}
	
			public string BackgroundColor
			{
				get { return Concrete.BackgroundColor; }		
			}
	
			public string Color
			{
				get { return Concrete.Color; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class ImageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IImage, HP.LFT.SDK.Web.ImageDescription>, HP.LFT.SDK.Web.IImage
		{
			public ImageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Alt
			{
				get { return Concrete.Alt; }		
			}
	
			public string Src
			{
				get { return Concrete.Src; }		
			}
	
			public string Href
			{
				get { return Concrete.Href; }		
			}
	
			public string Target
			{
				get { return Concrete.Target; }		
			}
	
			public HP.LFT.SDK.Web.ImageType Type
			{
				get { return Concrete.Type; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class ListBoxNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IListBox, HP.LFT.SDK.Web.ListBoxDescription>, HP.LFT.SDK.Web.IListBox
		{
			public ListBoxNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Select(params HP.LFT.SDK.Web.IListItem[] items)
			{
				 Concrete.Select(items);
			}
	
			public void Select(params string[] items)
			{
				 Concrete.Select(items);
			}
	
			public void Select(params uint[] itemIndices)
			{
				 Concrete.Select(itemIndices);
			}
	
			public void Deselect(params HP.LFT.SDK.Web.IListItem[] items)
			{
				 Concrete.Deselect(items);
			}
	
			public void Deselect(params string[] items)
			{
				 Concrete.Deselect(items);
			}
	
			public void Deselect(params uint[] itemIndices)
			{
				 Concrete.Deselect(itemIndices);
			}
	
			public HP.LFT.SDK.Web.IListItem GetItem(string text)
			{
				return Concrete.GetItem(text);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Value
			{
				get { return Concrete.Value; }		
			}
	
			public string DefaultValue
			{
				get { return Concrete.DefaultValue; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsMultiple
			{
				get { return Concrete.IsMultiple; }		
			}
	
			public uint VisibleItemsCount
			{
				get { return Concrete.VisibleItemsCount; }		
			}
	
			public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.Web.IListItem> Items
			{
				get { return Concrete.Items; }		
			}
	
			public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.Web.IListItem> SelectedItems
			{
				get { return Concrete.SelectedItems; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IButton, HP.LFT.SDK.Web.ButtonDescription>, HP.LFT.SDK.Web.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string ButtonType
			{
				get { return Concrete.ButtonType; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class WebElementNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IWebElement, HP.LFT.SDK.Web.WebElementDescription>, HP.LFT.SDK.Web.IWebElement
		{
			public WebElementNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IEditField, HP.LFT.SDK.Web.EditFieldDescription>, HP.LFT.SDK.Web.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetSecure(string encryptedText)
			{
				 Concrete.SetSecure(encryptedText);
			}
	
			public void SetValue(string text)
			{
				 Concrete.SetValue(text);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string DefaultValue
			{
				get { return Concrete.DefaultValue; }		
			}
	
			public int MaxLength
			{
				get { return Concrete.MaxLength; }		
			}
	
			public string Pattern
			{
				get { return Concrete.Pattern; }		
			}
	
			public uint RowsCount
			{
				get { return Concrete.RowsCount; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string Value
			{
				get { return Concrete.Value; }		
			}
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public bool IsRequired
			{
				get { return Concrete.IsRequired; }		
			}
	
			public uint MaxCharsInLine
			{
				get { return Concrete.MaxCharsInLine; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
		{
			public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TResult RunJavaScript<TResult>(string scriptToRun)  where TResult:struct
			{
				return Concrete.RunJavaScript<TResult>(scriptToRun);
			}
	
			public string RunJavaScript(string scriptToRun)
			{
				return Concrete.RunJavaScript(scriptToRun);
			}
	
			public void Sync()
			{
				 Concrete.Sync();
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Url
			{
				get { return Concrete.Url; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
